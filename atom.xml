<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shares</title>
  
  <subtitle>let&#39;s share together</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-11-18T18:38:37.037Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>BKing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 508. Most Frequent Subtree Sum</title>
    <link href="http://example.com/2020/11/16/Leetcode/508/"/>
    <id>http://example.com/2020/11/16/Leetcode/508/</id>
    <published>2020-11-16T07:42:26.000Z</published>
    <updated>2020-11-18T18:38:37.037Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一棵树的树根，统计出现频率最高的 “子树和” 。一个结点的 “子树和” 定义为以该结点给根结点的子树所有结点的和（包括该结点本身）。所以频率最高 “子树和” 是哪些？如果出现多个，以任何顺序返回所有出现频率最高的值。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">输入:</span><br><span class="line"></span><br><span class="line">  5</span><br><span class="line"> &#x2F;  \</span><br><span class="line">2   -3</span><br><span class="line">输出 [2, -3, 4]，因为所有的值都仅出现了一次，以任何顺序返回即可。</span><br><span class="line">Input:</span><br><span class="line"></span><br><span class="line">  5</span><br><span class="line"> &#x2F;  \</span><br><span class="line">2   -5</span><br><span class="line">输出 [2]，因为值 2 出现了两次，然后值 -5 仅出现了一次。</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>可以假设任意“子树和”在 <code>32 </code>位有符号整数范围内。</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p><code>(DFS) ``O(n)</code><br>通过 <code>DFS </code>累计每个结点的子树和，并将该和用 map 进行频率统计。<br>具体地，遍历到当前结点时，定义 count 代表当前结点的子树和，然后递归左子树，递归右子树。count 等于该结点本身的值，加上递归左子树返回的值，再加上递归右子树返回的值。<br>将 count 加入 map中，然后返回 count 作为本次递归的返回值。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>每个结点仅遍历一次，且 map 的单次操作复杂度为 <code>O(1)</code>，故总时间复杂度为 <code>O(n)</code>。</p><h3 id="python-code"><a href="#python-code" class="headerlink" title="python code"></a>python code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.res = &#123;&#125;</span><br><span class="line">        self.ans = []</span><br><span class="line">        self.maxc = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        count = self.dfs(root.left) + self.dfs(root.right) + root.val</span><br><span class="line">        <span class="keyword">if</span> count <span class="keyword">not</span> <span class="keyword">in</span> self.res:</span><br><span class="line">            self.res[count] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.res[count] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.res[count] &gt; self.maxc:</span><br><span class="line">            self.ans = [count]</span><br><span class="line">            self.maxc = self.res[count]</span><br><span class="line">        <span class="keyword">elif</span> self.res[count] == self.maxc:</span><br><span class="line">            self.ans.append(count)</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findFrequentTreeSum</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[int]:</span></span><br><span class="line">        self.dfs(root)</span><br><span class="line">        <span class="keyword">return</span> self.ans</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一棵树的树根，统计出现频率最高的 “子树和” 。一个结点的 “子树和” 定义为以该结点给根结点的子树所有结点的和（包括该结点本身）。所以频率最高 “子树和” 是哪些？如果出现多个，以任何顺序返回所有出现频率最高的值。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="http://example.com/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Parent and Child in ElasticSearch</title>
    <link href="http://example.com/2020/11/15/Elastic/ElasticSearch-Parent-and-Child/"/>
    <id>http://example.com/2020/11/15/Elastic/ElasticSearch-Parent-and-Child/</id>
    <published>2020-11-15T07:42:26.000Z</published>
    <updated>2020-11-18T12:58:38.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Elasticsearch-Parent-and-Child"><a href="#Elasticsearch-Parent-and-Child" class="headerlink" title="Elasticsearch Parent and Child"></a>Elasticsearch Parent and Child</h1><p>Elasticsearch中的Parent和Child非常有利于我们进行关联查询，父子关系的查询在一定的场合下使用能加快我们的索引速度。由于ElasticSearch不是关系数据库，它只与搜索效率有关，而与存储效率无关。存储的数据已被非规范化并且几乎是平坦的。这意味着联接不能跨索引，ElasticSearch与速度有关，而传统联接的运行速度太慢。因此，子文档和父文档必须位于相同的索引和相同的分片中。</p><a id="more"></a><h1 id="父子关系例子图"><a href="#父子关系例子图" class="headerlink" title="父子关系例子图"></a>父子关系例子图</h1><p>让我们考虑下图1所示的家谱。该树有3个父母和9个孩子。每个角色都有“性别”和“ isAlive”状态。</p><p><img src="https://miro.medium.com/max/3413/1*fB1mQademBBgkXjLWQe1ug.png" alt="Image for post"></p><ul><li>Parent Child relationships</li><li>Having Multiple Children per Parent</li><li>Multiple Levels of Parent Child relationships</li></ul><h2 id="创建-“Family-Tree”-索引"><a href="#创建-“Family-Tree”-索引" class="headerlink" title="创建 “Family_Tree” 索引"></a>创建 “Family_Tree” 索引</h2><h3 id="创建相关索引"><a href="#创建相关索引" class="headerlink" title="创建相关索引"></a>创建相关索引</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">PUT family_tree</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;index&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;number_of_shards&quot;</span>:1,</span><br><span class="line">      <span class="string">&quot;number_of_replicas&quot;</span>:0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="string">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;price&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;isSale&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;boolean&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;relation_type&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;join&quot;</span>,</span><br><span class="line">        <span class="string">&quot;eager_global_ordinals&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;relations&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;parent&quot;</span>:<span class="string">&quot;child&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Parent-child uses the <code>&quot;eager_global_ordinals&quot;</code> to speed up joins.</p><p><code>shard = hash(routing_value) % number_of_primary_shards</code></p><h2 id="父节点插入数据"><a href="#父节点插入数据" class="headerlink" title="父节点插入数据"></a>父节点插入数据</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT family_tree/_doc/1?routing=Car</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>:<span class="string">&quot;Car&quot;</span>,</span><br><span class="line">  <span class="string">&quot;price&quot;</span>:<span class="string">&quot;2000000&quot;</span>,</span><br><span class="line">  <span class="string">&quot;isSale&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;relation_type&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;parent&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子节点插入数据"><a href="#子节点插入数据" class="headerlink" title="子节点插入数据"></a>子节点插入数据</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">PUT family_tree/_doc/2?routing=Car</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>:<span class="string">&quot;Van&quot;</span>,</span><br><span class="line">  <span class="string">&quot;price&quot;</span>:<span class="string">&quot;10000&quot;</span>,</span><br><span class="line">  <span class="string">&quot;isSale&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;relation_type&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;child&quot;</span>,</span><br><span class="line">    <span class="string">&quot;parent&quot;</span>:1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT family_tree/_doc/3?routing=Car</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>:<span class="string">&quot;Sedan&quot;</span>,</span><br><span class="line">  <span class="string">&quot;price&quot;</span>:<span class="string">&quot;10000&quot;</span>,</span><br><span class="line">  <span class="string">&quot;isSale&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;relation_type&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;child&quot;</span>,</span><br><span class="line">    <span class="string">&quot;parent&quot;</span>:1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT family_tree/_doc/4?routing=Car</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>:<span class="string">&quot;SUV&quot;</span>,</span><br><span class="line">  <span class="string">&quot;price&quot;</span>:<span class="string">&quot;8000&quot;</span>,</span><br><span class="line">  <span class="string">&quot;isSale&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;relation_type&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;child&quot;</span>,</span><br><span class="line">    <span class="string">&quot;parent&quot;</span>:1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：子文档和父文档必须位于同一分片上的限制。</p><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><h3 id="搜索和过滤指定的父节点"><a href="#搜索和过滤指定的父节点" class="headerlink" title="搜索和过滤指定的父节点"></a>搜索和过滤指定的父节点</h3><p>获取Car的所有子级：parent_id查询可用于查找属于特定父级的子级文档。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /family_tree/_search?pretty=<span class="literal">true</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;parent_id&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;child&quot;</span>,</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以查找出属于<code>parent_id</code>为 1 的所有子级文档。</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>在这之前我们先为Car添加新的孩子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT family_tree/_doc/5?routing=Car</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>:<span class="string">&quot;Sports car&quot;</span>,</span><br><span class="line">  <span class="string">&quot;price&quot;</span>:<span class="string">&quot;30000000&quot;</span>,</span><br><span class="line">  <span class="string">&quot;isSale&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;relation_type&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;child&quot;</span>,</span><br><span class="line">    <span class="string">&quot;parent&quot;</span>:1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取所有未销售销售的Car的孩子：bool和must关键字可以用来获取记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET /family_tree/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;filter&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;isSale&quot;</span>: <span class="string">&quot;false&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;parent_id&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>:<span class="string">&quot;child&quot;</span>,</span><br><span class="line">            <span class="string">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从查询到的结果中可以看到：只有跑车符合我们查询的条件。</p><p>我们也可以通过<code>has_child</code>查询拥有子节点未销售状态的父节点信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /family_tree/_search?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;has_child&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;child&quot;</span>,</span><br><span class="line">      <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;must&quot;</span>: [</span><br><span class="line">            &#123;<span class="string">&quot;match&quot;</span>: &#123;<span class="string">&quot;isSale&quot;</span>: <span class="string">&quot;false&quot;</span>&#125;&#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们也可以通过<code>has_parent</code>来查询父节点在销售的所有子节点信息：：has_parent关键字可帮助我们获取所有有父母过滤条件的孩子记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /family_tree/_search?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;has_parent&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;parent_type&quot;</span>: <span class="string">&quot;parent&quot;</span>,</span><br><span class="line">      <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;isSale&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个父母有多个孩子</p><p><img src="https://miro.medium.com/max/3418/1*s_Vyu441VyBSgKZqr4x2AQ.png" alt="Image for post"></p><p>多层次的关系（大孩子）</p><p><img src="https://miro.medium.com/max/3453/1*KEj7G2kXddc4Ajt77XniVQ.png" alt="Image for post"></p><p>不建议使用多个级别的关系来复制关系模型。每个关系级别都会在查询时增加内存和计算方面的开销。</p><p>ElasticSearch中的联接限制</p><ul><li>Parent and child documents must be indexed on the same shard.</li><li>Only one <code>join</code> field mapping is allowed per index.</li><li>An element can have multiple children but only one parent.</li><li>It is possible to add a new relation to an existing <code>join</code> field.</li><li>It is also possible to add a child to an existing element but <strong>only</strong> if the element is already a parent.</li></ul><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>当索引时间性能比搜索时间性能更重要时，父子联接可能是管理关系的有用技术，但代价是很高的。必须意识到这种权衡，例如父子文档的物理存储约束和增加的复杂性。另一个预防措施是避免多层父子关系，因为这将消耗更多的内存和计算量。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Elasticsearch-Parent-and-Child&quot;&gt;&lt;a href=&quot;#Elasticsearch-Parent-and-Child&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch Parent and Child&quot;&gt;&lt;/a&gt;Elasticsearch Parent and Child&lt;/h1&gt;&lt;p&gt;Elasticsearch中的Parent和Child非常有利于我们进行关联查询，父子关系的查询在一定的场合下使用能加快我们的索引速度。由于ElasticSearch不是关系数据库，它只与搜索效率有关，而与存储效率无关。存储的数据已被非规范化并且几乎是平坦的。这意味着联接不能跨索引，ElasticSearch与速度有关，而传统联接的运行速度太慢。因此，子文档和父文档必须位于相同的索引和相同的分片中。&lt;/p&gt;</summary>
    
    
    
    <category term="Elastic" scheme="http://example.com/categories/Elastic/"/>
    
    
    <category term="Elasticsearch" scheme="http://example.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>模糊查询处理Elasticsearch输入的错词</title>
    <link href="http://example.com/2020/11/15/Elastic/ElasticSearch-fuzzy-query/"/>
    <id>http://example.com/2020/11/15/Elastic/ElasticSearch-fuzzy-query/</id>
    <published>2020-11-15T07:42:26.000Z</published>
    <updated>2020-11-18T12:57:27.967Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Elasticsearch-模糊查询"><a href="#Elasticsearch-模糊查询" class="headerlink" title="Elasticsearch 模糊查询"></a>Elasticsearch 模糊查询</h3><p>用户会经常不小心或者记不太清自己所要搜索的词，而导致在查询过程中输入一些错字，这时通过Elasticsearch的模糊查询来处理输入的错字，非常有利于提高用户的搜索体验。</p><a id="more"></a><h3 id="匹配查询"><a href="#匹配查询" class="headerlink" title="匹配查询"></a>匹配查询</h3><p>在查询过程中，如果没有使用模糊查询，如果我输入的词中有错词，我们一般是很难通过匹配查询到想要的结果。</p><p>让我们首先举例说明错字<code>&quot;Gppgle&quot;</code>。</p><h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;content&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;query&quot;</span>: <span class="string">&quot;elastoc&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span> : 2,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;skipped&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;value&quot;</span> : 0,</span><br><span class="line">      <span class="string">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span> : null,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span> : [ ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匹配查询使用-fuzziness"><a href="#匹配查询使用-fuzziness" class="headerlink" title="匹配查询使用 fuzziness"></a>匹配查询使用 fuzziness</h3><p>使用Fuzzy Query时，查询的词可以不用与倒排索引中词完全匹配。</p><h4 id="请求-1"><a href="#请求-1" class="headerlink" title="请求"></a>请求</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;content&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;query&quot;</span>: <span class="string">&quot;elastoc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fuzziness&quot;</span>: <span class="string">&quot;auto&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="响应-1"><a href="#响应-1" class="headerlink" title="响应"></a>响应</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span> : 48,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;skipped&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;value&quot;</span> : 1,</span><br><span class="line">      <span class="string">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span> : 0.24658465,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;test_index&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_score&quot;</span> : 0.24658465,</span><br><span class="line">        <span class="string">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;content&quot;</span> : <span class="string">&quot;elastic&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&quot;AUTO&quot;</code>在<code>&quot;fuzziness&quot;</code>字段中使用值，Elasticsearch将确定合适的模糊距离。对于6个字符，默认情况下，Elasticsearch将允许2个编辑距离。<code>&quot;AUTO&quot;</code> 模糊性较为可取，但您可以根据需要使用准确的数字进行调整。</p><p>你也可以指定 <code>&quot;fuzziness&quot;</code>字段中的值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;content&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;query&quot;</span>: <span class="string">&quot;elastoc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fuzziness&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置合适-fuzziness"><a href="#设置合适-fuzziness" class="headerlink" title="设置合适 fuzziness"></a>设置合适 fuzziness</h3><p>只要elasticsearch中的词与你要查询的词之间的编辑距离在你的设置的<code>&quot;fuzziness&quot;</code>值的范围，都可以查询到。</p><p>但如果不在这个范围内，那就不会查询到对应的值，如下：</p><h4 id="请求-2"><a href="#请求-2" class="headerlink" title="请求"></a>请求</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;content&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;query&quot;</span>: <span class="string">&quot;elastoc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fuzziness&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="响应-2"><a href="#响应-2" class="headerlink" title="响应"></a>响应</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span> : 2,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;skipped&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;value&quot;</span> : 0,</span><br><span class="line">      <span class="string">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span> : null,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span> : [ ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>fuzzy query 的工作原理与term query类似，对所要查询的内容不会进行分析。</p><p>例如，我们在索引中添加内容<code>&quot;elastic kibana&quot;</code>，通过分析器查看，<code>standard_analyzer</code>会产生两个项，<code>&quot;elastic&quot;</code>和<code>&quot;kibana&quot;</code></p><h4 id="使用-analyze查看-quot-elastic-kibana-quot"><a href="#使用-analyze查看-quot-elastic-kibana-quot" class="headerlink" title="使用 _analyze查看&quot;elastic kibana&quot;"></a>使用 _analyze查看<code>&quot;elastic kibana&quot;</code></h4><h5 id="请求-3"><a href="#请求-3" class="headerlink" title="请求"></a>请求</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /test_index/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;standard&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>:<span class="string">&quot;elastic kibana&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="响应-3"><a href="#响应-3" class="headerlink" title="响应"></a>响应</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;token&quot;</span> : <span class="string">&quot;elastic&quot;</span>,</span><br><span class="line">      <span class="string">&quot;start_offset&quot;</span> : 0,</span><br><span class="line">      <span class="string">&quot;end_offset&quot;</span> : 7,</span><br><span class="line">      <span class="string">&quot;type&quot;</span> : <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;position&quot;</span> : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;token&quot;</span> : <span class="string">&quot;kibana&quot;</span>,</span><br><span class="line">      <span class="string">&quot;start_offset&quot;</span> : 8,</span><br><span class="line">      <span class="string">&quot;end_offset&quot;</span> : 14,</span><br><span class="line">      <span class="string">&quot;type&quot;</span> : <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;position&quot;</span> : 1</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模糊查询-quot-elastoc-kibaoa-quot"><a href="#模糊查询-quot-elastoc-kibaoa-quot" class="headerlink" title="模糊查询&quot;elastoc kibaoa&quot;"></a>模糊查询<code>&quot;elastoc kibaoa&quot;</code></h4><p>如果这个使用fuzzy query进行查询会的得不到想要的结果，如下：</p><h5 id="请求-4"><a href="#请求-4" class="headerlink" title="请求"></a>请求</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /test_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;fuzzy&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;content&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;value&quot;</span>:<span class="string">&quot;elastoc kibaoa&quot;</span>,</span><br><span class="line">          <span class="string">&quot;fuzziness&quot;</span>:<span class="string">&quot;auto&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="响应-4"><a href="#响应-4" class="headerlink" title="响应"></a>响应</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span> : 15,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;skipped&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;value&quot;</span> : 0,</span><br><span class="line">      <span class="string">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span> : null,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span> : [ ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模糊查询-quot-elastoc-quot"><a href="#模糊查询-quot-elastoc-quot" class="headerlink" title="模糊查询&quot;elastoc&quot;"></a>模糊查询<code>&quot;elastoc&quot;</code></h4><h5 id="请求-5"><a href="#请求-5" class="headerlink" title="请求"></a>请求</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /test_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;fuzzy&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;content&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;value&quot;</span>:<span class="string">&quot;elastoc&quot;</span>,</span><br><span class="line">          <span class="string">&quot;fuzziness&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="响应-5"><a href="#响应-5" class="headerlink" title="响应"></a>响应</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span> : 11,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;skipped&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;value&quot;</span> : 1,</span><br><span class="line">      <span class="string">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span> : 0.24658465,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;test_index&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_score&quot;</span> : 0.24658465,</span><br><span class="line">        <span class="string">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;content&quot;</span> : <span class="string">&quot;elastic kibana&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="匹配查询结合模糊参数"><a href="#匹配查询结合模糊参数" class="headerlink" title="匹配查询结合模糊参数"></a>匹配查询结合模糊参数</h4><p>如果在匹配查询中结合模糊参数是非常方便查询的事。分析器将先分析您的查询，然后再将其搜索到倒排索引中。这样在相应的 <code>fuzziness</code>值下可以得到我们想要的结果：</p><h5 id="请求-6"><a href="#请求-6" class="headerlink" title="请求"></a>请求</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;content&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;query&quot;</span>: <span class="string">&quot;elastoc kibano&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fuzziness&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="响应-6"><a href="#响应-6" class="headerlink" title="响应"></a>响应</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span> : 4,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;skipped&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;value&quot;</span> : 1,</span><br><span class="line">      <span class="string">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span> : 0.48631972,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;test_index&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_score&quot;</span> : 0.48631972,</span><br><span class="line">        <span class="string">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;content&quot;</span> : <span class="string">&quot;elastic kibana&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点：查询的term和倒排索引中的term是区分大小写，比如：Kibana与kibano的距离为： 2 </p><h4 id="Tips："><a href="#Tips：" class="headerlink" title="Tips："></a>Tips：</h4><p>如果我们查询 elastoc kibano，它与elastic kibana之间相差 2：但是请注意我们使用如下是可以查询到相应结果。</p><h5 id="请求-7"><a href="#请求-7" class="headerlink" title="请求"></a>请求</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;content&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;query&quot;</span>: <span class="string">&quot;elastoc kibano&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fuzziness&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="响应-7"><a href="#响应-7" class="headerlink" title="响应"></a>响应</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 4,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 1,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 0.48631972,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;test_index&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.48631972,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;content&quot; : &quot;elastic kibana&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以尝试查询<code>&quot;elastoc kibano&quot;</code>与<code>&quot;Hong Kong&quot;</code>之间编辑距离差为：2，再查询中<code>&quot;fuzziness&quot;:1</code>，也返回了结果，这是因为查询是根据term<code>&quot;elastoc&quot;</code>和<code>&quot;kibano&quot;</code>分析器进行分析的。</p><h2 id="调整模糊查询参数"><a href="#调整模糊查询参数" class="headerlink" title="调整模糊查询参数"></a>调整模糊查询参数</h2><p>适当调整模糊查询的参数，可以提高查询中的用户体验，查询到想要的结果。</p><h3 id="fuzzy-query-参数"><a href="#fuzzy-query-参数" class="headerlink" title="fuzzy query 参数"></a>fuzzy query 参数</h3><table><thead><tr><th align="left">参数名</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">fuzziness</td><td align="left">定义最大的编辑距离，默认为<code>AUTO</code>。<code>fuzziness</code>值为0、1、2，编辑距离最大只能设置为2。<code>AUTO</code>策略：在<code>AUTO</code>模式下，根据输入查询的<code>term</code>的长度决定编辑距离大小。用户也可以自定义<code>term</code>长度边界的最大和最小值，<code>AUTO</code>:<code>[low]</code>,<code>[high]</code>，如果没有定义的话，默认值为：<code>3</code>和<code>6</code>，即等价于 <code>AUTO</code>:<code>3</code>,<code>6</code>。</td></tr><tr><td align="left">prefix_length</td><td align="left">定义最初始不会被<code>“模糊”</code>的<code>term</code>的数量。这是基于用户的输入一般不会在最开始犯错误的设定的基础上设置的参数。这个参数的设定将减少去召回限定编辑距离的<code>term</code>时，默认参数为<code>0</code>。</td></tr><tr><td align="left">max_expansions</td><td align="left">定义<code>fuzzy query</code>会扩展的最大term的数量。默认为 <code>50</code>。</td></tr><tr><td align="left">transpositions</td><td align="left">定义在计算编辑聚利时，是否允许<code>term</code>的交换（例如<code>ab</code>-&gt;<code>ba</code>），默认参数为<code>false</code>。</td></tr></tbody></table><h3 id="模糊性-fuzziness"><a href="#模糊性-fuzziness" class="headerlink" title="模糊性 fuzziness"></a>模糊性 <code>fuzziness</code></h3><ol><li><p>fuzziness 是fuzzy query的核心。</p></li><li><p>我们传递给此参数的值是允许的最大距离。</p></li><li><p>我们可以传递两种类型的值，即用于精确最大距离的整数和<code>&quot;AUTO&quot;</code>。</p></li><li><p>该<code>&quot;AUTO&quot;</code>值允许查询中的模糊性是动态的。</p></li></ol><p>​       我们可以在<code>&quot;AUTO&quot;</code>值中调整2个参数并将其写为<code>&quot;AUTO:[low],[high]&quot;</code>。如果字词长度低于下限值，则查询会将模糊性设置为0。如果<code>term</code>长度在低值和高值之间，则查询将模糊性设置为1。最后，如果<code>term</code>长度大于高值，则查询将<code>fuzziness</code>设置为 2。如果未确定低值和高值，使用默认值<code>3</code>和<code>6</code>。</p><p>让我们进一步认识<code>auto</code>，假如索引内容存在这些内容：<code>el</code>、<code>fuzzy</code>、<code>elasticsearch</code></p><ul><li><code>&quot;el&quot;</code>与 <code>&quot;eo&quot;</code>的编辑距离为：1。</li><li><code>&quot;fyzzy&quot;</code>：与 <code>&quot;fuzzy&quot;</code>的编辑距离为：1 。</li><li><code>&quot;fyzyy&quot;</code>与<code>&quot;fuzzy&quot;</code>的编辑距离为：2。</li><li><code>&quot;elasticsearhc&quot;</code>与<code>elasticsearch</code>：的编辑距离为：2。</li><li><code>&quot;elasticseaooo&quot;</code>与<code>elasticsearch</code>：的编辑距离为：3。</li></ul><p>使用<code>auto</code>后，只有这些<code>term</code>会产生结果：</p><ul><li><code>“fyzzy”</code></li><li><code>“elasticsearhc”</code></li></ul><h3 id="换位-transpositions"><a href="#换位-transpositions" class="headerlink" title="换位 transpositions"></a>换位 <code>transpositions</code></h3><p><code>transpositions</code> 将允许您的查询将两个相邻字符（ab-&gt; ba）的换位计算为1个距离。</p><p>例如，<code>test_index</code>中content中有这一段内容：<code>&quot;The elasticsearch is excellent sofeware&quot;</code>，如果将<code>transpositions</code>设置为<code>true</code>，那么<code>&quot;leasticsearcc&quot;</code>也能得到匹配结果。</p><h4 id="请求-8"><a href="#请求-8" class="headerlink" title="请求"></a>请求</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET test_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;fuzzy&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;content&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;leasticsearcc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fuzziness&quot;</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">        <span class="string">&quot;transpositions&quot;</span>:<span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="响应-8"><a href="#响应-8" class="headerlink" title="响应"></a>响应</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span> : 780,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;skipped&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;value&quot;</span> : 1,</span><br><span class="line">      <span class="string">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span> : 0.49901885,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;test_index&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_score&quot;</span> : 0.49901885,</span><br><span class="line">        <span class="string">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;content&quot;</span> : <span class="string">&quot;The elasticsearch is excellent sofeware&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>transpositions</code>：1   <code>fuzziness</code>：2</p><h3 id="最大扩展max-expansions"><a href="#最大扩展max-expansions" class="headerlink" title="最大扩展max_expansions"></a>最大扩展<code>max_expansions</code></h3><p><code>max_expansions</code> 将确定您从查询中获得的最大结果。</p><p>如果<code>max_expansions</code>设置为：1，并且Elasticsearch中有2个文档匹配到查询，则Elasticsearch将仅返回其中一个文档。 请注意，这<code>max_expansions</code>适用于分片级别。因此，如果Elasticsearch中有很多分片，即使<code>max_expansion</code>为1，查询也可能返回更多结果。（默认值为<code>max_expansions</code>50）</p><h3 id="前缀长度prefix-length"><a href="#前缀长度prefix-length" class="headerlink" title="前缀长度prefix_length"></a>前缀长度<code>prefix_length</code></h3><p><code>prefix_length</code> 是模糊查询中不考虑的前缀字符数。</p><p>例如，在<code>test_index</code>索引中<code>content</code>存在<code>&quot;The elasticsearch is excellent sofeware&quot;</code></p><p>如果将设置<code>prefix_length</code>为1，则查询不会得到任何结果<code>&quot;llasticsearch&quot;</code>。</p><p><code>prefix_length</code>设置默认为：<code>0</code></p><h4 id="查询-quot-llasticsearch-quot"><a href="#查询-quot-llasticsearch-quot" class="headerlink" title="查询&quot;llasticsearch&quot;"></a>查询<code>&quot;llasticsearch&quot;</code></h4><h5 id="请求-9"><a href="#请求-9" class="headerlink" title="请求"></a>请求</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET test_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;fuzzy&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;content&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;llasticsearch&quot;</span>,</span><br><span class="line">        <span class="string">&quot;prefix_length&quot;</span>:1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="响应-9"><a href="#响应-9" class="headerlink" title="响应"></a>响应</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span> : 4,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;skipped&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;value&quot;</span> : 0,</span><br><span class="line">      <span class="string">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span> : null,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span> : [ ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询-quot-eelasticsearch-quot"><a href="#查询-quot-eelasticsearch-quot" class="headerlink" title="查询&quot;eelasticsearch&quot;"></a>查询<code>&quot;eelasticsearch&quot;</code></h4><p>会得到相应返回结果：</p><h5 id="请求-10"><a href="#请求-10" class="headerlink" title="请求"></a>请求</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET test_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;fuzzy&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;content&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;eelasticsearch&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fuzziness&quot;</span>: <span class="string">&quot;auto&quot;</span>, </span><br><span class="line">        <span class="string">&quot;prefix_length&quot;</span>:1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="响应-10"><a href="#响应-10" class="headerlink" title="响应"></a>响应</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span> : 3,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;skipped&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;value&quot;</span> : 1,</span><br><span class="line">      <span class="string">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span> : 0.3194875,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;test_index&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_score&quot;</span> : 0.3194875,</span><br><span class="line">        <span class="string">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;content&quot;</span> : <span class="string">&quot;The elasticsearch is excellent sofeware&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在写的时候可能会有错误（感谢反馈下~ 邮箱：<a href="mailto:&#66;&#75;&#x69;&#x6e;&#103;&#56;&#64;&#56;&#x38;&#46;&#x63;&#x6f;&#x6d;">&#66;&#75;&#x69;&#x6e;&#103;&#56;&#64;&#56;&#x38;&#46;&#x63;&#x6f;&#x6d;</a>）</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Elasticsearch-模糊查询&quot;&gt;&lt;a href=&quot;#Elasticsearch-模糊查询&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch 模糊查询&quot;&gt;&lt;/a&gt;Elasticsearch 模糊查询&lt;/h3&gt;&lt;p&gt;用户会经常不小心或者记不太清自己所要搜索的词，而导致在查询过程中输入一些错字，这时通过Elasticsearch的模糊查询来处理输入的错字，非常有利于提高用户的搜索体验。&lt;/p&gt;</summary>
    
    
    
    <category term="Elastic" scheme="http://example.com/categories/Elastic/"/>
    
    
    <category term="Elasticsearch" scheme="http://example.com/tags/Elasticsearch/"/>
    
    <category term="query" scheme="http://example.com/tags/query/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 10. Regular Expression Matching</title>
    <link href="http://example.com/2020/11/15/Leetcode/10/"/>
    <id>http://example.com/2020/11/15/Leetcode/10/</id>
    <published>2020-11-15T07:42:26.000Z</published>
    <updated>2020-11-18T18:36:04.832Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个字符串 s 和模板串 p ，实现支持通配符 ‘.’  和 ‘*’ 的正则表达式匹配。</p><p>‘.’ : 可以匹配任意单个字符<br>‘*’ : 表示 0 个或任意多个前一个字符</p><a id="more"></a><p>模板串需要匹配整个字符串。<br>模板串<code>p</code>一定合法，即 <code>&#39;*&#39;</code> 前面一定有非<code>&#39;*&#39;</code>字符。</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p><code>s </code>可能为空，只包含小写字母<code> a-z</code>。<br><code>p </code>可能为空，只包含小写字母<code> a-z</code>，以及<code>.</code>和<code> *</code>。</p><h3 id="样例1"><a href="#样例1" class="headerlink" title="样例1"></a>样例1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">s &#x3D; &quot;aa&quot;</span><br><span class="line">p &#x3D; &quot;a&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：&quot;a&quot;不能匹配整个字符串&quot;aa&quot;</span><br></pre></td></tr></table></figure><h3 id="样例2"><a href="#样例2" class="headerlink" title="样例2"></a>样例2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">s &#x3D; &quot;aa&quot;</span><br><span class="line">p &#x3D; &quot;a*&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：&#39;a*&#39;表示0个或任意多个&#39;a&#39;的时候，可以匹配&quot;aa&quot;</span><br></pre></td></tr></table></figure><h3 id="样例3"><a href="#样例3" class="headerlink" title="样例3"></a>样例3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">s &#x3D; &quot;ab&quot;</span><br><span class="line">p &#x3D; &quot;.*&quot;</span><br><span class="line">输入：true</span><br><span class="line">解释：&quot;.*&quot;表示0个或任意多个&#39;.&#39;，而&#39;.&#39;可以匹配任意字符，所以p和s可以匹配</span><br></pre></td></tr></table></figure><h3 id="样例4"><a href="#样例4" class="headerlink" title="样例4"></a>样例4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">s &#x3D; &quot;aab&quot;</span><br><span class="line">p &#x3D; &quot;c*a*b&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：这里的p表示0个c、2个a、1个b，可以匹配s</span><br></pre></td></tr></table></figure><h3 id="样例5"><a href="#样例5" class="headerlink" title="样例5"></a>样例5</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">s &#x3D; &quot;mississippi&quot;</span><br><span class="line">p &#x3D; &quot;mis*is*p*.&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>(动态规划) <code>O(nm)</code></p><ol><li>设状态 <code>f(i,j)</code>表示字符串 <code>s </code>的前 <code>i </code>个字符和字符串<code>p</code>的前<code>j</code>个字符能否匹配。这里假设 <code>s </code>和<code>p</code>的下标均从<code>1</code>开始。初始时，<code>f(0,0)=true</code>。</li><li>平凡转移<code> f(i,j)=f(i,j)</code> or<code> f(i−1,j−1)</code>，当<code> i&gt;0</code>且<code> s(i) == p(j) || p(j) == &#39;.&#39;</code>。</li><li>当<code>p(j) == &#39;*&#39;</code>时，若<code> j&gt;=2</code>，<code>f(i,j)</code> 可以从<code> f(i,j−2)</code> 转移，表示丢弃这一次的 <code>&#39;*&#39; </code>和它之前的那个字符；若<code>i&gt;0</code>且<code> s(i) == p(j - 1)</code>，表示这个字符可以利用这个 <code>&#39;*&#39;</code>，则可以从<code> f(i−1,j)</code> 转移，表示利用 <code>&#39;*&#39;</code>。</li><li>初始状态<code> f(0,0)=true</code>；循环枚举<code>i</code>从 0 到<code> n</code>；<code>j </code>从 <code>1</code> 到<code> m</code>。因为 <code>f(0,j)</code> 有可能是有意义的，需要被转移更新。</li><li>最终答案为<code> f(n,m)</code>。</li></ol><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>状态数为<code> O(nm)</code>，每次转移仅需常数时间，故总时间复杂度为<code> O(nm)</code>。</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>状态数为<code> O(nm)</code>，则需要<code> O(nm)</code> 的数组存储状态。</p><h4 id="python-code"><a href="#python-code" class="headerlink" title="python code"></a>python code</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span>(<span class="params">self, s: <span class="built_in">str</span>, p: <span class="built_in">str</span></span>) -&gt; bool:</span></span><br><span class="line">        s, p = <span class="string">&#x27; &#x27;</span>+s, <span class="string">&#x27; &#x27;</span>+p</span><br><span class="line">        m,n = <span class="built_in">len</span>(s), <span class="built_in">len</span>(p)</span><br><span class="line">        dp = [[<span class="literal">False</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">                <span class="keyword">if</span> p[j] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> dp[i][j<span class="number">-2</span>]:</span><br><span class="line">                        dp[i][j] = dp[i][j<span class="number">-2</span>]</span><br><span class="line">                    <span class="keyword">elif</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> (s[i] == p[j<span class="number">-1</span>] <span class="keyword">or</span> p[j<span class="number">-1</span>] == <span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">                        dp[i][j] = dp[i<span class="number">-1</span>][j]</span><br><span class="line">                <span class="keyword">elif</span> i &gt; <span class="number">0</span>  <span class="keyword">and</span> (s[i] == p[j] <span class="keyword">or</span> p[j] == <span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个字符串 s 和模板串 p ，实现支持通配符 ‘.’  和 ‘*’ 的正则表达式匹配。&lt;/p&gt;
&lt;p&gt;‘.’ : 可以匹配任意单个字符&lt;br&gt;‘*’ : 表示 0 个或任意多个前一个字符&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="http://example.com/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>153. 寻找旋转排序数组中的最小值</title>
    <link href="http://example.com/2020/11/15/Leetcode/153/"/>
    <id>http://example.com/2020/11/15/Leetcode/153/</id>
    <published>2020-11-15T07:42:26.000Z</published>
    <updated>2020-11-18T18:36:38.437Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>现有一个有序数组，假设从某个数开始将它后面的数按顺序放到了数组前面。<br>即 [0,1,2,4,5,6,7] 可能变成 [4,5,6,7,0,1,2].</p><p>请找出数组中的最小元素。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">数组中不包含重复元素。</span><br><span class="line"></span><br><span class="line">样例1</span><br><span class="line">输入：[3,4,5,1,2] </span><br><span class="line">输出：1</span><br><span class="line">样例2</span><br><span class="line">输入：[4,5,6,7,0,1,2]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>(二分)<code> O(logn)</code><br>处理这种问题有个常用技巧：如果不想处理边界情况，比如当数组只有两三个数的时候，代码会出问题。我们可以在数组长度太短(这道题中我们判断数组长度小于5)时，直接暴力循环做；数组有一定长度时再用二分做。<br>这样做并不会影响算法的时间复杂度，但会缩短写代码的时间。</p><p>为了便于理解，我们将数组中的数画在二维坐标系中，横坐标表示数组下标，纵坐标表示数值，如下所示：</p><p><img src="D:\Elastic\blog\source\img\153.png" alt="QQ图片20180531223152.png"></p><p>我们会发现数组中最小值前面的数<code> nums[i]</code> 都满足：<code>nums[i]</code>≥<code>nums[0]</code>，其中<code> nums[n−1]</code>是数组最后一个元素；而数组中最小值后面的数（包括最小值）都不满足这个条件。<br>所以我们可以二分出最小值的位置。</p><p>另外，不要忘记处理数组完全单调的特殊情况。</p><h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><p>二分查找，所以时间复杂度是<code> O(logn)</code>。</p><h3 id="python-code"><a href="#python-code" class="headerlink" title="python code"></a>python code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMin</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> nums[<span class="number">-1</span>] &gt; nums[<span class="number">0</span>]: <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        l = <span class="number">0</span></span><br><span class="line">        r = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt; r:</span><br><span class="line">            mid = l + r &gt;&gt; <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &gt;= nums[<span class="number">0</span>]:</span><br><span class="line">                l = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                r = mid</span><br><span class="line">        <span class="keyword">return</span> nums[l]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;现有一个有序数组，假设从某个数开始将它后面的数按顺序放到了数组前面。&lt;br&gt;即 [0,1,2,4,5,6,7] 可能变成 [4,5,6,7,0,1,2].&lt;/p&gt;
&lt;p&gt;请找出数组中的最小元素。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="http://example.com/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 215. 数组中的第K个最大元素</title>
    <link href="http://example.com/2020/11/15/Leetcode/215/"/>
    <id>http://example.com/2020/11/15/Leetcode/215/</id>
    <published>2020-11-15T07:42:26.000Z</published>
    <updated>2020-11-18T18:37:00.310Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>未排序的数组，返回其排序后的第 K 个最大元素。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">样例：</span><br><span class="line">输入: [3,2,1,5,6,4] 和 k &#x3D; 2</span><br><span class="line">输出: 5</span><br><span class="line"></span><br><span class="line">输入: [3,2,3,1,2,4,5,5,6] 和 k &#x3D; 4</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>(扫描一遍 维护一个小根堆）<code> O(n∗logk)</code><br>遍历数组，维护一个大小为<code>K</code>的小根堆<br>为什么是小根堆，堆顶元素是堆中最小，那么还在堆中的都比它大，没在堆内的都比它小。<br>堆中有<code>k</code>个元素，那么他自然就是第<code>K</code>的最大元素了<br><code>找最大，用小根</code><br><code>注意：</code>优先队列默认的是大根堆，所以声明的时候注意参数。</p><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>线性扫描<code> O(n∗logk)</code></p><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>额外的小根堆 <code>O(k)</code></p><h3 id="python-code"><a href="#python-code" class="headerlink" title="python code"></a>python code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> *</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthLargest</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        h = []</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            heappush(h, num)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(h) &gt; k: heappop(h)</span><br><span class="line">        <span class="keyword">return</span> h[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;未排序的数组，返回其排序后的第 K 个最大元素。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="http://example.com/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 507. Perfect Number</title>
    <link href="http://example.com/2020/11/15/Leetcode/507/"/>
    <id>http://example.com/2020/11/15/Leetcode/507/</id>
    <published>2020-11-15T07:42:26.000Z</published>
    <updated>2020-11-18T18:37:47.323Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>对于一个 正整数，如果它和除了它自身以外的所有正因子之和相等，我们称它为 “完美数”。给定一个 正整数 n， 如果他是完美数，返回 True，否则返回 False。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">输入: 28</span><br><span class="line">输出: True</span><br><span class="line">解释: 28 &#x3D; 1 + 2 + 4 + 7 + 14</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>输入的数字 <code>n</code> 不会超过 <code>100,000,000 (1e8)</code>。</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>(枚举) <code>O(√n)</code><br>从<code> i=2</code>开始，逐一枚举 n 的正因数，直到 <code>√n </code>为止。若 <code>n%i=0</code>，则找到了一个正因子；同时，若<code> i∗i≠n</code>，则另外找到了 <code>n/i</code>为正因子。最后求和时需要统计上正因子 1。</p><p>注意 n 为<code> 1</code> 的特殊情况。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>最多枚举 <code>O(n√)</code> 个数字，故时间复杂度为 <code>O(n√)</code>。</p><h3 id="python-code"><a href="#python-code" class="headerlink" title="python code"></a>python code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkPerfectNumber</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">1</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        k = <span class="built_in">int</span>(sqrt(num)) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, k):</span><br><span class="line">            <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">                count += i</span><br><span class="line">                <span class="keyword">if</span> i ** <span class="number">2</span> != num:</span><br><span class="line">                    count += num // i</span><br><span class="line">        <span class="keyword">return</span> count + <span class="number">1</span> == num </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;对于一个 正整数，如果它和除了它自身以外的所有正因子之和相等，我们称它为 “完美数”。给定一个 正整数 n， 如果他是完美数，返回 True，否则返回 False。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="http://example.com/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 509. 斐波那契数</title>
    <link href="http://example.com/2020/11/15/Leetcode/509/"/>
    <id>http://example.com/2020/11/15/Leetcode/509/</id>
    <published>2020-11-15T07:42:26.000Z</published>
    <updated>2020-11-18T18:38:55.512Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">F(0) &#x3D; 0,   F(1) &#x3D; 1</span><br><span class="line">F(N) &#x3D; F(N - 1) + F(N - 2), 其中 N &gt; 1.</span><br><span class="line">给定 N，计算 F(N)。</span><br><span class="line"></span><br><span class="line">样例</span><br><span class="line">输入：4</span><br><span class="line">输出：3</span><br><span class="line">解释：F(4) &#x3D; F(3) + F(2) &#x3D; 2 + 1 &#x3D; 3.</span><br></pre></td></tr></table></figure><p>算法<br>(一次循环) <code>O(n)</code></p><h3 id="python-code"><a href="#python-code" class="headerlink" title="python code"></a>python code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">self, N: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        a = <span class="number">0</span></span><br><span class="line">        b = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> N &gt; <span class="number">0</span>:</span><br><span class="line">            c = a + b</span><br><span class="line">            a = b</span><br><span class="line">            b = c</span><br><span class="line">            N -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="http://example.com/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 513. Find Bottom Left Tree Value</title>
    <link href="http://example.com/2020/11/15/Leetcode/513/"/>
    <id>http://example.com/2020/11/15/Leetcode/513/</id>
    <published>2020-11-15T07:42:26.000Z</published>
    <updated>2020-11-18T12:50:21.445Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个二叉树，在树的最后一行找到最左边的值。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">样例：</span><br><span class="line">输入:</span><br><span class="line"></span><br><span class="line">    2</span><br><span class="line"></span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   3</span><br><span class="line"></span><br><span class="line">输出: 1</span><br><span class="line">输入:</span><br><span class="line"></span><br><span class="line">        1</span><br><span class="line">       &#x2F; \</span><br><span class="line">      2   3</span><br><span class="line">     &#x2F;   &#x2F; \</span><br><span class="line">    4   5   6</span><br><span class="line">       &#x2F;</span><br><span class="line">      7</span><br><span class="line"></span><br><span class="line">输出: 7</span><br></pre></td></tr></table></figure><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p><code>(DFS) O(n)</code><br>普通的DFS算法，每次先递归遍历左子树，若发现当前深度比记录的最大深度还大时，更新记录的最大深度并更新答案。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>每个结点最多遍历一次，故时间复杂度为<code> O(n)</code>。</p><h3 id="python-code"><a href="#python-code" class="headerlink" title="python code"></a>python code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.ans = <span class="number">0</span></span><br><span class="line">        self.depth = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">self, root, d</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> d &gt; self.depth:</span><br><span class="line">            self.depth = d</span><br><span class="line">            self.ans = root.val</span><br><span class="line">        self.dfs(root.left, d+<span class="number">1</span>)</span><br><span class="line">        self.dfs(root.right, d+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findBottomLeftValue</span>(<span class="params">self, root: TreeNode</span>) -&gt; int:</span></span><br><span class="line">        self.dfs(root, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self.ans</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个二叉树，在树的最后一行找到最左边的值。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="http://example.com/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 514. Freedom Trail</title>
    <link href="http://example.com/2020/11/15/Leetcode/514/"/>
    <id>http://example.com/2020/11/15/Leetcode/514/</id>
    <published>2020-11-15T07:42:26.000Z</published>
    <updated>2020-11-18T18:39:39.780Z</updated>
    
    <content type="html"><![CDATA[<p>电子游戏 “辐射4” 中，任务“通向自由”要求玩家到达名为 “Freedom Trail Ring” 的金属表盘，并使用表盘拼写特定关键词才能开门。给定一个字符串 ring，表示刻在外环上的编码；给定另一个字符串 key，表示需要拼写的关键词。您需要算出能够拼写关键词中所有字符的最少步数。</p><a id="more"></a><p>最初，**ring **的第一个字符与12:00方向对齐。您需要顺时针或逆时针旋转 ring 以使 **key **的一个字符在 12:00 方向对齐，然后按下中心按钮，以此逐个拼写完 **key **中的所有字符。</p><p>旋转 **ring **拼出 key 字符 **key[i] **的阶段中：</p><ol><li> 您可以将 <strong>ring **顺时针或逆时针旋转</strong>一个位置<strong>，计为1步。旋转的最终目的是将字符串 **ring **的一个字符与 12:00 方向对齐，并且这个字符必须等于字符 **key[i] 。</strong></li><li> 如果字符 <strong>key[i] **已经对齐到12:00方向，您需要按下中心按钮进行拼写，这也将算作 **1 步</strong>。按完之后，您可以开始拼写 **key **的下一个字符（下一阶段）, 直至完成所有拼写。</li></ol><p><strong>示例：</strong></p><img src="D:\Elastic\blog\source\img\514.jpg" alt="514" style="zoom: 33%;" /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: ring &#x3D; &quot;godding&quot;, key &#x3D; &quot;gd&quot;</span><br><span class="line">输出: 4</span><br><span class="line">解释:</span><br><span class="line"> 对于 key 的第一个字符 &#39;g&#39;，已经在正确的位置, 我们只需要1步来拼写这个字符。 </span><br><span class="line"> 对于 key 的第二个字符 &#39;d&#39;，我们需要逆时针旋转 ring &quot;godding&quot; 2步使它变成 &quot;ddinggo&quot;。</span><br><span class="line"> 当然, 我们还需要1步进行拼写。</span><br><span class="line"> 因此最终的输出是 4。</span><br></pre></td></tr></table></figure><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a><strong>提示：</strong></h3><ol><li> <strong>ring</strong> 和 <strong>key</strong> 的字符串长度取值范围均为 1 至 100；</li><li> 两个字符串中都只有小写字符，并且均可能存在重复字符；</li><li> 字符串 <strong>key</strong> 一定可以由字符串 <strong>ring</strong> 旋转拼出。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;电子游戏 “辐射4” 中，任务“通向自由”要求玩家到达名为 “Freedom Trail Ring” 的金属表盘，并使用表盘拼写特定关键词才能开门。给定一个字符串 ring，表示刻在外环上的编码；给定另一个字符串 key，表示需要拼写的关键词。您需要算出能够拼写关键词中所有字符的最少步数。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="http://example.com/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 515. Find Largest Value in Each Tree Row</title>
    <link href="http://example.com/2020/11/15/Leetcode/515/"/>
    <id>http://example.com/2020/11/15/Leetcode/515/</id>
    <published>2020-11-15T07:42:26.000Z</published>
    <updated>2020-11-18T12:53:48.203Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>您需要在二叉树的每一行中找到最大的值。</p><a id="more"></a><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">          1</span><br><span class="line">         &#x2F; \</span><br><span class="line">        3   2</span><br><span class="line">       &#x2F; \   \  </span><br><span class="line">      5   3   9 </span><br><span class="line"></span><br><span class="line">输出: [1, 3, 9]</span><br></pre></td></tr></table></figure><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>(DFS)<code> O(n)</code><br>普通的DFS递归算法，在每一个结点，判断当前层是否使第一次访问到；若是，则扩展当前答案数组记录当前层的最大值；若不是，则比较更新当前层的最大值。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>每个结点仅遍历一次，故时间复杂度为<code> O(n)</code>。</p><h3 id="python-code"><a href="#python-code" class="headerlink" title="python code"></a>python code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.res = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">self, root, d</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.res) == d:</span><br><span class="line">            self.res.append(root.val)</span><br><span class="line">        <span class="keyword">if</span> root.val &gt; self.res[d]:</span><br><span class="line">            self.res[d] = root.val</span><br><span class="line">        self.dfs(root.left, d+<span class="number">1</span>)</span><br><span class="line">        self.dfs(root.right, d+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestValues</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[int]:</span></span><br><span class="line">        self.dfs(root, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> self.res        </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;您需要在二叉树的每一行中找到最大的值。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="http://example.com/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 516. Longest Palindromic Subsequence</title>
    <link href="http://example.com/2020/11/15/Leetcode/516/"/>
    <id>http://example.com/2020/11/15/Leetcode/516/</id>
    <published>2020-11-15T07:42:26.000Z</published>
    <updated>2020-11-18T18:40:36.162Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个字符串 s，找到其中最长的回文子序列。可以假设 s 的最大长度为 1000。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">输入：&quot;bbbab&quot;</span><br><span class="line">输出：4</span><br><span class="line">解释：一个可能的最长回文子序列为 &quot;bbbb&quot;。</span><br><span class="line">输入：&quot;cbbd&quot;</span><br><span class="line">输出：2</span><br><span class="line">解释：一个可能的最长回文子序列为 &quot;bb&quot;。</span><br><span class="line">限制</span><br><span class="line">1 &lt;&#x3D; s.length &lt;&#x3D; 1000</span><br><span class="line">s 只包含小写英文字母。</span><br></pre></td></tr></table></figure><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>(动态规划) <code>O(n2)</code><br>设状态 <code>f(i,j)</code> 表示闭区间 <code>[i, j] </code>的最长回文子序列。<br>初始时 <code>f(i,i)=1</code>，其余待定。<br>每次 <code>f(i,j)</code> 有两种转移，若 <code>s(i)=s(j)</code>，则 <code>f(i,j)=f(i+1,j−1)+2</code>；否则 <code>f(i,j)=max(f(i+1,j),f(i,j−1))</code>。<br>最终答案为 <code>f(0,n−1)</code>。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>状态数为 <code>O(n2)</code>，转移时间为 <code>O(1)</code>，故总时间复杂度为 <code>O(n2)</code>。</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>需要 <code>O(n2)</code> 的额外空间存储状态。</p><h3 id="python-code"><a href="#python-code" class="headerlink" title="python code"></a>python code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindromeSubseq</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; int:</span></span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line">        f = [[<span class="number">0</span>]*n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            f[m][m] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> lens <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n+<span class="number">1</span>): <span class="comment">#枚举长度</span></span><br><span class="line">            k = n - lens + <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, k): <span class="comment">#枚举起点</span></span><br><span class="line">                j = i + lens - <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> s[i] == s[j]:</span><br><span class="line">                    f[i][j] = f[i+<span class="number">1</span>][j<span class="number">-1</span>] + <span class="number">2</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    f[i][j] = <span class="built_in">max</span>(f[i+<span class="number">1</span>][j], f[i][j<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">return</span> f[<span class="number">0</span>][n<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个字符串 s，找到其中最长的回文子序列。可以假设 s 的最大长度为 1000。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="http://example.com/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 525. Contiguous Array</title>
    <link href="http://example.com/2020/11/15/Leetcode/525/"/>
    <id>http://example.com/2020/11/15/Leetcode/525/</id>
    <published>2020-11-15T07:42:26.000Z</published>
    <updated>2020-11-18T18:40:23.261Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个二进制数组, 找到含有相同数量的 0 和 1 的最长连续子数组。</p><a id="more"></a><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: [0,1]</span><br><span class="line">输出: 2</span><br><span class="line">解释: [0, 1] 是具有相同数量0和1的最长连续子数组。</span><br><span class="line">输入: [0,1,0]</span><br><span class="line">输出: 2</span><br><span class="line">解释: [0, 1] (或 [1, 0]) 是具有相同数量0和1的最长连续子数组。</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>给定的二进制数组的长度不会超过 50000。</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>(前缀和) O(n)</p><ol><li><p>将数组中的 0 视作 -1，则求连续相同 0 和 1 个数的子数组就是求连续和为 0 的子数组。</p></li><li><p>连续子数组的和可以用两个前缀和相减得到，故这里就是求下标差距最大的两个相等的前缀和。</p></li></ol><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>每个数字仅遍历一次，故总时间复杂度为 O(n)。</p><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>需要额外的空间，故空间复杂度为 O(n)。</p><h3 id="python-code"><a href="#python-code" class="headerlink" title="python code"></a>python code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMaxLength</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        res = &#123;&#125;</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] == <span class="number">0</span>:</span><br><span class="line">               count -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">                ans = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> count <span class="keyword">in</span> res:</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, i - res[count])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res[count] = i</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个二进制数组, 找到含有相同数量的 0 和 1 的最长连续子数组。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="http://example.com/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 530 Minimum Absolute Difference in BST</title>
    <link href="http://example.com/2020/11/15/Leetcode/530/"/>
    <id>http://example.com/2020/11/15/Leetcode/530/</id>
    <published>2020-11-15T07:42:26.000Z</published>
    <updated>2020-11-18T18:40:08.896Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个所有节点为非负值的二叉搜索树，求树中任意两节点的差的绝对值的最小值。</p><a id="more"></a><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     3</span><br><span class="line">    &#x2F;</span><br><span class="line">   2</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">最小绝对差为1，其中 2 和 1 的差的绝对值为 1（或者 2 和 3）。</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>树中至少有 2 个节点。</p><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><p>(中序遍历) <code>O(n)</code><br>对二叉搜索树进行中序遍历，得到的是单调递增的序列，故可以在中序遍历的过程中，记录上一次遍历到的值，然后和本次遍历的值求差得到一组差值。所有的差值取最小值就是答案。</p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>中序遍历每个结点仅遍历一次，故时间复杂度为<code> O(n)</code>。</p><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>需要额外<code>O(n)</code> 的空间存储递归的栈。</p><h4 id="python-code"><a href="#python-code" class="headerlink" title="python code"></a>python code</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.ans = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">        self.val = <span class="number">0</span></span><br><span class="line">        self.flag = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traverse</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">        self.traverse(root.left)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.flag:</span><br><span class="line">            self.ans = <span class="built_in">min</span>(self.ans, root.val - self.val)</span><br><span class="line">        self.flag = <span class="literal">False</span></span><br><span class="line">        self.val = root.val</span><br><span class="line">        self.traverse(root.right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMinimumDifference</span>(<span class="params">self, root: TreeNode</span>) -&gt; int:</span></span><br><span class="line">        self.traverse(root)</span><br><span class="line">        <span class="keyword">return</span> self.ans</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个所有节点为非负值的二叉搜索树，求树中任意两节点的差的绝对值的最小值。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="http://example.com/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
</feed>
